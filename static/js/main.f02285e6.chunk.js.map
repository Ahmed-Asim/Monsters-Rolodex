{"version":3,"sources":["components/clearable-input/clearable-input.script.jsx","components/card/card.script.jsx","App.js","reportWebVitals.js","index.js"],"names":["ClearableInput","placeholder","handler","useState","value","setValue","className","type","onChange","e","target","trim","onClick","MonsterCard","image","email","name","src","alt","App","monsters","setMonsters","filterText","setFilterText","useEffect","fetch","then","response","json","data","map","id","key","filter","monster","toLowerCase","includes","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2RAyBeA,EAtBQ,SAAC,GAA4B,IAA3BC,EAA0B,EAA1BA,YAAaC,EAAa,EAAbA,QAAa,EACvBC,mBAAS,IADc,mBAC1CC,EAD0C,KACnCC,EADmC,KASjD,OACI,sBAAKC,UAAU,0BAAf,UACE,uBAAOC,KAAK,OACLN,YAAaA,EACbO,SAXW,SAACC,GACvBJ,EAASI,EAAEC,OAAON,OAClBF,GAAWA,EAAQO,IAURL,MAAOA,IAEd,qBAAKE,UAAW,SAAWF,EAAMO,QAAU,WACtCC,QAXe,WACxBP,EAAS,WCEEQ,G,MAVK,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,KAClC,OACI,sBAAKV,UAAU,eAAf,UACE,qBAAKW,IAAKH,EAAOI,IAAI,KACrB,6BAAKF,IACL,4BAAID,SC8BGI,MAhCf,WAAgB,IAAD,EACmBhB,mBAAS,IAD5B,mBACNiB,EADM,KACIC,EADJ,OAEuBlB,mBAAS,IAFhC,mBAENmB,EAFM,KAEMC,EAFN,KAcb,OAXAC,qBAAU,WACRC,MAAM,8CACLC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACLR,EAAYQ,EAAKC,KAAI,gBAAEd,EAAF,EAAEA,KAAMD,EAAR,EAAQA,MAAOgB,EAAf,EAAeA,GAAf,MAAwB,CAACf,OAAMD,QAAOD,MAAM,wBAAD,OAA0BiB,EAA1B,aAAyCC,IAAKD,YAG/G,IAKC,sBAAKzB,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACIL,YAAa,kBACbC,QARiB,SAACO,GAC1Bc,EAAcd,EAAEC,OAAON,MAAMO,WASzB,qBAAKL,UAAU,oBAAf,SAEIc,EACCa,QAAO,SAACC,GAAD,OAAaA,EAAQlB,KAAKmB,cAAcC,SAASd,MACxDQ,KAAI,SAACI,GAAD,OAAa,cAAC,EAAD,eAAmCA,GAAjBA,EAAQF,cClBzCK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACL,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM5BZ,M","file":"static/js/main.f02285e6.chunk.js","sourcesContent":["import './clearable-input.style.css';\r\nimport {useState} from 'react';\r\n\r\nconst ClearableInput = ({placeholder, handler}) => {\r\n  const [value, setValue] = useState('');\r\n  const onChangeHandler = (e) => {\r\n    setValue(e.target.value);\r\n    handler && handler(e);\r\n  };\r\n  const crossClickHandler = () => {\r\n    setValue('');\r\n  };\r\n  return (\r\n      <div className=\"clearable-input-wrapper\">\r\n        <input type=\"text\"\r\n               placeholder={placeholder}\r\n               onChange={onChangeHandler}\r\n               value={value}\r\n        />\r\n        <div className={'cross' + (value.trim() && ' active')}\r\n             onClick={crossClickHandler}>\r\n        </div>\r\n      </div>\r\n  );\r\n};\r\nexport default ClearableInput;","import './card.style.css';\r\n\r\nconst MonsterCard = ({image, email, name}) => {\r\n  return (\r\n      <div className=\"monster-card\">\r\n        <img src={image} alt=\"\"/>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default MonsterCard;","import './App.css';\nimport ClearableInput from './components/clearable-input/clearable-input.script';\nimport MonsterCard from './components/card/card.script';\nimport {useEffect, useState} from 'react';\n\nfunction App() {\n  const [monsters, setMonsters] = useState([]);\n  const [filterText, setFilterText] = useState('');\n  useEffect(() => {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then((response) => response.json())\n    .then((data) => {\n      setMonsters(data.map(({name, email, id}) => ({name, email, image: `https://robohash.org/${id}?set=set2`, key: id})));\n    })\n    ;\n  }, []);\n  const filterInputHandler = (e) => {\n    setFilterText(e.target.value.trim());\n  };\n  return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <ClearableInput\n            placeholder={'search monsters'}\n            handler={filterInputHandler}\n        />\n        <div className=\"monster-card-list\">\n          {\n            monsters\n            .filter((monster) => monster.name.toLowerCase().includes(filterText))\n            .map((monster) => <MonsterCard key={monster.key} {...monster}/>)\n          }\n        </div>\n      </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n      <App/>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}